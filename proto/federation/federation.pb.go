// Code generated by protoc-gen-go.
// source: github.com/micro/federation-srv/proto/federation/federation.proto
// DO NOT EDIT!

/*
Package federation is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/federation-srv/proto/federation/federation.proto

It has these top-level messages:
	Config
	Topic
	Plugin
	Broker
	ConfigRequest
	ConfigResponse
*/
package federation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Config struct {
	Topics  map[string]*Topic  `protobuf:"bytes,1,rep,name=topics" json:"topics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Brokers map[string]*Broker `protobuf:"bytes,2,rep,name=brokers" json:"brokers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Config) GetTopics() map[string]*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *Config) GetBrokers() map[string]*Broker {
	if m != nil {
		return m.Brokers
	}
	return nil
}

type Topic struct {
	Rate      float64  `protobuf:"fixed64,1,opt,name=rate" json:"rate,omitempty"`
	Publish   []string `protobuf:"bytes,2,rep,name=publish" json:"publish,omitempty"`
	Subscribe []string `protobuf:"bytes,3,rep,name=subscribe" json:"subscribe,omitempty"`
}

func (m *Topic) Reset()                    { *m = Topic{} }
func (m *Topic) String() string            { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()               {}
func (*Topic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Plugin struct {
	Hosts []string `protobuf:"bytes,2,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *Plugin) Reset()                    { *m = Plugin{} }
func (m *Plugin) String() string            { return proto.CompactTextString(m) }
func (*Plugin) ProtoMessage()               {}
func (*Plugin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Broker struct {
	Plugins map[string]*Plugin `protobuf:"bytes,1,rep,name=plugins" json:"plugins,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Broker) Reset()                    { *m = Broker{} }
func (m *Broker) String() string            { return proto.CompactTextString(m) }
func (*Broker) ProtoMessage()               {}
func (*Broker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Broker) GetPlugins() map[string]*Plugin {
	if m != nil {
		return m.Plugins
	}
	return nil
}

type ConfigRequest struct {
}

func (m *ConfigRequest) Reset()                    { *m = ConfigRequest{} }
func (m *ConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigRequest) ProtoMessage()               {}
func (*ConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ConfigResponse struct {
	Config *Config `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *ConfigResponse) Reset()                    { *m = ConfigResponse{} }
func (m *ConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigResponse) ProtoMessage()               {}
func (*ConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ConfigResponse) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*Config)(nil), "Config")
	proto.RegisterType((*Topic)(nil), "Topic")
	proto.RegisterType((*Plugin)(nil), "Plugin")
	proto.RegisterType((*Broker)(nil), "Broker")
	proto.RegisterType((*ConfigRequest)(nil), "ConfigRequest")
	proto.RegisterType((*ConfigResponse)(nil), "ConfigResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Federation service

type FederationClient interface {
	Config(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
}

type federationClient struct {
	c           client.Client
	serviceName string
}

func NewFederationClient(serviceName string, c client.Client) FederationClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "federation"
	}
	return &federationClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *federationClient) Config(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Federation.Config", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Federation service

type FederationHandler interface {
	Config(context.Context, *ConfigRequest, *ConfigResponse) error
}

func RegisterFederationHandler(s server.Server, hdlr FederationHandler) {
	s.Handle(s.NewHandler(&Federation{hdlr}))
}

type Federation struct {
	FederationHandler
}

func (h *Federation) Config(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.FederationHandler.Config(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x92, 0x5d, 0x4f, 0xfa, 0x30,
	0x14, 0xc6, 0xff, 0x83, 0x3f, 0x23, 0x3b, 0xbc, 0xc5, 0x8a, 0x4a, 0xb8, 0x32, 0x33, 0x26, 0x18,
	0x63, 0x49, 0x30, 0x46, 0xf1, 0x4e, 0x8d, 0x5e, 0x1b, 0xe3, 0x17, 0xa0, 0xb3, 0xb0, 0x06, 0x58,
	0x67, 0x5f, 0x48, 0xf8, 0x7e, 0x7e, 0x30, 0xbb, 0x53, 0x20, 0xdb, 0x95, 0x77, 0xf0, 0xf4, 0x79,
	0x7e, 0xe7, 0x39, 0xed, 0xe0, 0x69, 0x21, 0x4c, 0x6a, 0x19, 0x4d, 0xe4, 0x7a, 0xbc, 0x16, 0x89,
	0x92, 0xe3, 0x39, 0xff, 0xe2, 0x6a, 0x66, 0x84, 0xcc, 0x6e, 0xb4, 0xda, 0x8c, 0x73, 0x25, 0x4d,
	0x59, 0x2c, 0xfd, 0xa4, 0x78, 0x16, 0xff, 0x04, 0x10, 0xbe, 0xc8, 0x6c, 0x2e, 0x16, 0xe4, 0x02,
	0x42, 0x23, 0x73, 0x91, 0xe8, 0x41, 0x70, 0x5e, 0x1f, 0xb5, 0x26, 0xc7, 0xd4, 0x1f, 0xd0, 0x4f,
	0x54, 0x5f, 0x33, 0xa3, 0xb6, 0xe4, 0x12, 0x9a, 0x4c, 0xc9, 0x25, 0x57, 0x7a, 0x50, 0x43, 0x57,
	0x7f, 0xef, 0x7a, 0xf6, 0x32, 0xda, 0x86, 0x77, 0xd0, 0x2a, 0xa7, 0x5a, 0x50, 0x5f, 0xf2, 0xad,
	0xe3, 0x06, 0xa3, 0x88, 0x9c, 0x40, 0x63, 0x33, 0x5b, 0x59, 0xee, 0x00, 0x81, 0x03, 0x84, 0x9e,
	0xff, 0x58, 0x7b, 0x08, 0x86, 0xf7, 0xd0, 0x2e, 0x63, 0xaa, 0xb9, 0xd3, 0x6a, 0xae, 0xb9, 0x9b,
	0x58, 0x04, 0xe3, 0x29, 0x34, 0x90, 0x42, 0xda, 0xf0, 0xdf, 0xed, 0xc7, 0x31, 0x12, 0x90, 0x1e,
	0x34, 0x73, 0xcb, 0x56, 0x42, 0xa7, 0xd8, 0x36, 0x22, 0x47, 0x10, 0x69, 0xcb, 0x74, 0xa2, 0x04,
	0xe3, 0x83, 0x7a, 0x21, 0xc5, 0x67, 0x10, 0xbe, 0xaf, 0xec, 0x42, 0x64, 0xa4, 0x03, 0x8d, 0x54,
	0x6a, 0xe3, 0x37, 0x8b, 0xe2, 0x14, 0x42, 0x3f, 0xa1, 0x58, 0x3a, 0x47, 0xcb, 0xfe, 0x6a, 0xfa,
	0xbb, 0xd9, 0xd4, 0x27, 0x77, 0x4b, 0xbb, 0xf6, 0xe5, 0xff, 0x7f, 0xb4, 0xf7, 0x56, 0x6c, 0xdf,
	0x83, 0x8e, 0xbf, 0xc4, 0x0f, 0xfe, 0x6d, 0xb9, 0x36, 0xf1, 0x15, 0x74, 0xf7, 0x82, 0xce, 0x65,
	0xa6, 0x39, 0x71, 0x2d, 0x13, 0x54, 0x10, 0x57, 0xe4, 0xbd, 0x61, 0x32, 0x05, 0x78, 0x3b, 0x3c,
	0x2a, 0xb9, 0x3e, 0xbc, 0x66, 0x97, 0x56, 0x90, 0xc3, 0x1e, 0xad, 0x12, 0xe3, 0x7f, 0x2c, 0xc4,
	0x4f, 0xe0, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x70, 0xf5, 0x1f, 0x64, 0x47, 0x02, 0x00, 0x00,
}
